:host {
    min-width: 15em; max-width: 15em; min-height: 15em; max-height: 15em;
    --icon: 1.6em;
    display: grid; grid-template: 2em auto .2em .9em .9em / var(--icon) calc(50% - var(--icon)) auto var(--icon) var(--icon);
    padding: .3em .4em;
    overflow: hidden;
    position: relative;

    &::after,object {
        position: absolute; right: 0; z-index: -1;
    }
    * {text-shadow: 0 0 .05em,0 0 .05em black;}
}
:host(.hall)::before {
    content: '\e04d';
    background: gray; clip-path: polygon(0 0,100% 0,0 100%);
    width: 3em; height: 3em;
    scale: 1.3;
    text-align: left; text-indent: .4em;
    line-height: 2;
    grid-area: 1/1/2/2;
}
:host(.bsb)::after {
    content: url(../img/reincarnated.svg#bsb); 
    width: 10em;
    transform: rotate(-135deg) translate(-.15em,1.9em);
}
:host(.mfb)::after {
    content: url(../img/reincarnated.svg#mfb); 
    width: 9em;
    transform: translate(2em,-1.6em) rotate(15deg);
}
:host(.bbb)::after {
    content: url(../img/reincarnated.svg#bbb); 
    width: 9em;
    transform: translate(2em,-1.6em) rotate(15deg);
}
:host img {
    filter: drop-shadow(0 0 .1em var(--on));
    &[alt=types] {filter: drop-shadow(0 0 .1em var(--type));}
    &[alt=lines] {filter: drop-shadow(0 0 .05em var(--line));}
}
:host figure img {filter: drop-shadow(0 0 .4em hsla(0,0%,100%,.3));}
:host svg {filter: drop-shadow(0 0 .2em var(--type));}

:host {
    h4 {grid-area: 4/2/6/3;}
    .chi:nth-of-type(1) {grid-area: 4/2/5/4;}
    .chi:nth-of-type(2) {grid-area: 5/2/6/4;}
    .chi:nth-of-type(1):not(:has(+.chi)) {grid-area: 4/2/6/3;}
    .jap {grid-area: 1/1/3/2;}
    .eng {grid-area: 2/1/3/2;}
    figure {grid-area: 2/1/3/-1;}
    div {grid-area: 2/1/3/-1;}
    p {grid-area: 1/3/-1/-1;}
    dl {grid-area: 2/2/-1/-1;}
    strong {grid-area: 2/4/3/5;}
    ul {grid-area: 4/1/-1/-1;}
    a {grid-area: 2/2/3/3;}
} 
:host(.ratchet) h4 {grid-area: 4/1/6/3;}

:host object {
    pointer-events: none;
    width: 100%;
}
:host h5 {
    * {
        color: var(--on);
        display: inline-block;
    }
    &.chi {
        color: var(--type);
        place-self: center start;
        font-size: .75em;
        margin: .15em 0 0 .2em;
        letter-spacing: .1em;
    
        span {
            -webkit-text-stroke: var(--type) .1em; paint-order: stroke fill;
            transform: translateX(calc(50%*(var(--s) - 1) + .05em)) scale(var(--s)); --s:.95;
            letter-spacing: calc(var(--gap)/var(--s)); --gap:.2em;
            margin-right: calc((2em + var(--gap))*(var(--s) - 1));
        }
        sub {
            max-width: 2em;
            vertical-align: middle;
            font-size: .5em;
            margin: 0 0 .3em .2em;
            letter-spacing: 0; line-height: 1;
        }
    }
    &.jap,&.eng {
        writing-mode: vertical-lr;
        align-self: end;
        font-size: .65em;
        margin-bottom: -.1em;
    
        sub {
            vertical-align: unset;
            font-size: .7em;
            margin-inline-start: .3em;
        }
    }
    &.jap {
        margin-right: -.1em;
        justify-self: end;
    }
    &.eng {
        color: var(--type);
        margin-left: -.2em;
        text-transform: uppercase;

        span {color: var(--on);}
    }
}
:host ul {
    display: flex; gap: .2em;

    li {
        ul:not(:has(img[alt^=type])) &:first-child {margin-left: auto;}
        &:has(img[alt^=type]) {
            width: var(--icon);
            margin-right: auto;
        }
        &:has(img:is([alt^=system])) {
            order: 1;
            width: 2.5em;
        }
        &:has(img:is([alt^=line])) {
            order: 1;
            width: 1.5em;
        }
        &:not(:has(img)) {
            order: 2;
            line-height: 1.8;
            font-size: 1.1em;
        }
        img {
            object-fit: contain;
            height: 100%; width: 100%;
        }
    }
}
:host(.CX.motif) ul::before {
    content: '';
    width: 1.4em;
    background: url(../img/blade/CX-motif/DR.png) center / contain no-repeat;
    filter: saturate(0) brightness(99);
}

:host a {
    font-size: .8em; color: var(--theme);
    margin: 0 0 -.5em -.3em;
    place-self: end start;

    &::before {
        content: '\e03c';
        font-size: 1.45em;
        margin-right: .1em;
        transform: translate(.4em,-.4em); display: inline-block;
    }
}

:host h4 {
    justify-self: start;
    font-size: 1.5em; line-height: 1.3;
    color: var(--type);
    margin-left: .05em;
}
:host(.ratchet) h4 {
    color: hsl(var(--c),70%,50%);
}

:host dl {
    place-self: end;
    display: grid; gap: .4em .2em;
    grid-template: repeat(2,1.5em) / repeat(2,auto) minmax(2.1em,max-content) minmax(1.1em,max-content);
    margin: 0 .2em .05em 0;

    dt {
        font-size: .6em;
        text-align: right; line-height: 1.1;
        white-space: pre;
        margin-left: 1em;
    }
    dd {
        font-size: 1.6em; font-style: italic;
        text-align: left; line-height: .8;
    }
    :is(dt,dd):first-of-type {
        grid-area: 1/-2/2/-1;
    }
    dt:first-of-type {
        position: absolute; right: 0;
        border-bottom: .2em solid;
        transform: translate(-1em,-1.8em);
        width: 3em;
    }
    dd:first-of-type {
        text-align: right;
        transform: translateX(-.4em);
    }
    dd:first-of-type~* {
        grid-row-start: 2;
    }
    sup {
        margin-left: .15em;
        line-height: 0;
        position: absolute;
    }
    small {
        font-size: .6em;
        margin-left: .1em;
        vertical-align: middle;
    }
}

:host strong {
    align-self: end;
    font-size: .6em; color: silver;
    writing-mode: vertical-lr;
    margin: 0 0 .2em -.4em;
}

:host figure {
    place-self: center;
    width: 6em; height: 6em;

    img {
        width: 100%; height: 100%;
        object-fit: contain;
    }
}
:host p {
    text-align: left; font-size: .6em;
    line-height: 1.4; letter-spacing: .03em;
    margin: 0; padding-left: .5em;
    overflow: hidden;

    &::before {
        content: '一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一';
        width: 100%; height: 100%;
        float: left;
        visibility: hidden;
        shape-outside: polygon(0% 13%,75% 50%,0% 87%);
    }
}
:host div {
    position: absolute; inset: 5em;

    svg {
        position: absolute; left: 50%; top: 50%;
        transform: translate(-50%,-50%) rotate(var(--angle)) translateY(4.8em);
        width: 1.8em;
    }
    use {
        stroke: var(--type); fill: none;
    }
    :is(.att .att,.bal .bal,.def .def,.sta .sta) use {
        fill: var(--type);
    }
    .att {--angle: 000deg;}
    .bal {--angle: 180deg;}
    .sta {--angle: -90deg;}
    .def {--angle: 090deg;}
}
